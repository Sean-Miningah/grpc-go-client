// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: analytics.proto

package grpc_go_cleint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CuratedAnalyticsClient is the client API for CuratedAnalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CuratedAnalyticsClient interface {
	VerifyRequestToken(ctx context.Context, in *JWTTokenRequest, opts ...grpc.CallOption) (*TokenVerificationResponse, error)
	GetOpportunities(ctx context.Context, in *OpportunityAnalyticsRequest, opts ...grpc.CallOption) (*OpportunityAnalyticsResponse, error)
	GetLeadStatus(ctx context.Context, in *LeadStatusRequest, opts ...grpc.CallOption) (*LeadStatusResponse, error)
	GetTotalAccLeadContactDeal(ctx context.Context, in *TotalAccLeadContactDealRequest, opts ...grpc.CallOption) (*TotalAccLeadContactDealResponse, error)
}

type curatedAnalyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewCuratedAnalyticsClient(cc grpc.ClientConnInterface) CuratedAnalyticsClient {
	return &curatedAnalyticsClient{cc}
}

func (c *curatedAnalyticsClient) VerifyRequestToken(ctx context.Context, in *JWTTokenRequest, opts ...grpc.CallOption) (*TokenVerificationResponse, error) {
	out := new(TokenVerificationResponse)
	err := c.cc.Invoke(ctx, "/pb.CuratedAnalytics/VerifyRequestToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curatedAnalyticsClient) GetOpportunities(ctx context.Context, in *OpportunityAnalyticsRequest, opts ...grpc.CallOption) (*OpportunityAnalyticsResponse, error) {
	out := new(OpportunityAnalyticsResponse)
	err := c.cc.Invoke(ctx, "/pb.CuratedAnalytics/GetOpportunities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curatedAnalyticsClient) GetLeadStatus(ctx context.Context, in *LeadStatusRequest, opts ...grpc.CallOption) (*LeadStatusResponse, error) {
	out := new(LeadStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.CuratedAnalytics/GetLeadStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *curatedAnalyticsClient) GetTotalAccLeadContactDeal(ctx context.Context, in *TotalAccLeadContactDealRequest, opts ...grpc.CallOption) (*TotalAccLeadContactDealResponse, error) {
	out := new(TotalAccLeadContactDealResponse)
	err := c.cc.Invoke(ctx, "/pb.CuratedAnalytics/GetTotalAccLeadContactDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CuratedAnalyticsServer is the server API for CuratedAnalytics service.
// All implementations must embed UnimplementedCuratedAnalyticsServer
// for forward compatibility
type CuratedAnalyticsServer interface {
	VerifyRequestToken(context.Context, *JWTTokenRequest) (*TokenVerificationResponse, error)
	GetOpportunities(context.Context, *OpportunityAnalyticsRequest) (*OpportunityAnalyticsResponse, error)
	GetLeadStatus(context.Context, *LeadStatusRequest) (*LeadStatusResponse, error)
	GetTotalAccLeadContactDeal(context.Context, *TotalAccLeadContactDealRequest) (*TotalAccLeadContactDealResponse, error)
	mustEmbedUnimplementedCuratedAnalyticsServer()
}

// UnimplementedCuratedAnalyticsServer must be embedded to have forward compatible implementations.
type UnimplementedCuratedAnalyticsServer struct {
}

func (UnimplementedCuratedAnalyticsServer) VerifyRequestToken(context.Context, *JWTTokenRequest) (*TokenVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRequestToken not implemented")
}
func (UnimplementedCuratedAnalyticsServer) GetOpportunities(context.Context, *OpportunityAnalyticsRequest) (*OpportunityAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpportunities not implemented")
}
func (UnimplementedCuratedAnalyticsServer) GetLeadStatus(context.Context, *LeadStatusRequest) (*LeadStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeadStatus not implemented")
}
func (UnimplementedCuratedAnalyticsServer) GetTotalAccLeadContactDeal(context.Context, *TotalAccLeadContactDealRequest) (*TotalAccLeadContactDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalAccLeadContactDeal not implemented")
}
func (UnimplementedCuratedAnalyticsServer) mustEmbedUnimplementedCuratedAnalyticsServer() {}

// UnsafeCuratedAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CuratedAnalyticsServer will
// result in compilation errors.
type UnsafeCuratedAnalyticsServer interface {
	mustEmbedUnimplementedCuratedAnalyticsServer()
}

func RegisterCuratedAnalyticsServer(s grpc.ServiceRegistrar, srv CuratedAnalyticsServer) {
	s.RegisterService(&CuratedAnalytics_ServiceDesc, srv)
}

func _CuratedAnalytics_VerifyRequestToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuratedAnalyticsServer).VerifyRequestToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CuratedAnalytics/VerifyRequestToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuratedAnalyticsServer).VerifyRequestToken(ctx, req.(*JWTTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuratedAnalytics_GetOpportunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpportunityAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuratedAnalyticsServer).GetOpportunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CuratedAnalytics/GetOpportunities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuratedAnalyticsServer).GetOpportunities(ctx, req.(*OpportunityAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuratedAnalytics_GetLeadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuratedAnalyticsServer).GetLeadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CuratedAnalytics/GetLeadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuratedAnalyticsServer).GetLeadStatus(ctx, req.(*LeadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuratedAnalytics_GetTotalAccLeadContactDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalAccLeadContactDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuratedAnalyticsServer).GetTotalAccLeadContactDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CuratedAnalytics/GetTotalAccLeadContactDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuratedAnalyticsServer).GetTotalAccLeadContactDeal(ctx, req.(*TotalAccLeadContactDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CuratedAnalytics_ServiceDesc is the grpc.ServiceDesc for CuratedAnalytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CuratedAnalytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CuratedAnalytics",
	HandlerType: (*CuratedAnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyRequestToken",
			Handler:    _CuratedAnalytics_VerifyRequestToken_Handler,
		},
		{
			MethodName: "GetOpportunities",
			Handler:    _CuratedAnalytics_GetOpportunities_Handler,
		},
		{
			MethodName: "GetLeadStatus",
			Handler:    _CuratedAnalytics_GetLeadStatus_Handler,
		},
		{
			MethodName: "GetTotalAccLeadContactDeal",
			Handler:    _CuratedAnalytics_GetTotalAccLeadContactDeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics.proto",
}
